name: 🚀 CI/CD Pipeline - Onde Spectrale

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  NEXT_TELEMETRY_DISABLED: 1

jobs:
  # ===============================
  # QUALITY GATES
  # ===============================
  quality-gates:
    name: 🔍 Quality Gates
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🔍 TypeScript Check
      run: npm run typecheck
      
    - name: 🧹 Lint Check
      run: npm run lint
      
    - name: 🎨 Format Check
      run: npm run format:check || true
      
    - name: 📊 Bundle Size Check
      run: npm run size-limit || true

  # ===============================
  # SECURITY SCAN
  # ===============================
  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 🔒 Run Security Audit
      run: npm audit --audit-level moderate
      
    - name: 🔍 Dependency Check
      run: npx audit-ci --moderate

  # ===============================
  # BUILD & TEST
  # ===============================
  build-and-test:
    name: 🏗️ Build & Test
    runs-on: ubuntu-latest
    needs: [quality-gates]
    
    strategy:
      matrix:
        node-version: [18, 20]
        
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🧪 Run Unit Tests
      run: npm run test:coverage
      
    - name: 🏗️ Build Application
      run: npm run build
      
    - name: 📊 Upload Coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        
    - name: 💾 Cache Build
      uses: actions/cache@v3
      with:
        path: .next
        key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}

  # ===============================
  # E2E TESTS
  # ===============================
  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: [build-and-test]
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🎭 Run Playwright Tests
      run: npx playwright test
      
    - name: 📊 Upload E2E Results
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: playwright-report
        path: playwright-report/

  # ===============================
  # DEPLOYMENT
  # ===============================
  deploy-staging:
    name: 🚀 Deploy Staging
    runs-on: ubuntu-latest
    needs: [build-and-test, e2e-tests]
    if: github.ref == 'refs/heads/develop'
    
    environment:
      name: staging
      url: https://onde-spectrale-staging.web.app
      
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🏗️ Build for staging
      run: npm run build
      env:
        NODE_ENV: staging
        
    - name: 🚀 Deploy to Firebase Staging
      uses: FirebaseExtended/action-hosting-deploy@v0
      with:
        repoToken: '${{ secrets.GITHUB_TOKEN }}'
        firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_STAGING }}'
        channelId: staging
        projectId: onde-spectrale-staging

  deploy-production:
    name: 🌟 Deploy Production
    runs-on: ubuntu-latest
    needs: [build-and-test, e2e-tests]
    if: github.ref == 'refs/heads/main'
    
    environment:
      name: production
      url: https://onde-spectrale.web.app
      
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4
      
    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: 📦 Install dependencies
      run: npm ci
      
    - name: 🏗️ Build for production
      run: npm run build
      env:
        NODE_ENV: production
        
    - name: 🌟 Deploy to Firebase Production
      uses: FirebaseExtended/action-hosting-deploy@v0
      with:
        repoToken: '${{ secrets.GITHUB_TOKEN }}'
        firebaseServiceAccount: '${{ secrets.FIREBASE_SERVICE_ACCOUNT_PROD }}'
        channelId: live
        projectId: onde-spectrale

  # ===============================
  # NOTIFICATIONS
  # ===============================
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: 📢 Notify Success
      if: needs.deploy-production.result == 'success'
      run: |
        echo "🎉 Déploiement production réussi!"
        echo "📡 Onde Spectrale est en ligne: https://onde-spectrale.web.app"
        
    - name: 📢 Notify Failure
      if: needs.deploy-production.result == 'failure'
      run: |
        echo "❌ Déploiement production échoué!"
        echo "🔧 Vérifiez les logs pour plus d'informations"